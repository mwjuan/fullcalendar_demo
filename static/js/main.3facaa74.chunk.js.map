{"version":3,"sources":["ReactBigCalendar.js","index.js"],"names":["moment","locale","week","dow","localizer","momentLocalizer","ReactBigCalendar","eventsData","setEventsData","useState","currentView","setView","currentDate","setDate","toDate","_jsx","className","children","Calendar","defaultView","selectable","date","events","style","height","onSelectEvent","event","alert","JSON","stringify","onSelectSlot","_ref","start","end","Date","parse","endOf","title","window","prompt","concat","format","components","toolbar","_ref2","onView","views","day","month","currentMoment","_jsxs","display","justifyContent","margin","Button","borderRadius","border","marginRight","width","onClick","icon","LeftOutlined","timestamp","clone","add","RightOutlined","_","map","Object","keys","p","value","flexDirection","alignContent","alignItems","position","top","left","Tooltip","marginLeft","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.3facaa74.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport { LeftOutlined, RightOutlined } from '@ant-design/icons'\nimport { Button, Tooltip } from \"antd\";\nimport moment from \"moment\";\nimport 'moment/locale/zh-cn'\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport './style.css';\nimport _ from 'lodash';\n\nmoment.locale('zh-cn', { week: { dow: 0 } })\nconst localizer = momentLocalizer(moment);\n\nexport default function ReactBigCalendar() {\n  const [eventsData, setEventsData] = useState([]);\n  const [currentView, setView] = useState('month');\n  const [currentDate, setDate] = useState(moment().toDate());\n\n  const handleSelect = ({ start, end }) => {\n    if(currentView === 'month') end = moment(Date.parse(end)).endOf('day'); \n    const title = window.prompt(`New Event name start:${moment(Date.parse(start)).format('YYYY-MM-DD HH:mm:ss')}, end:${moment(Date.parse(end)).format('YYYY-MM-DD HH:mm:ss')}`);\n    if (title)\n      setEventsData([\n        ...eventsData,\n        {\n          start,\n          end,\n          title\n        }\n      ]);\n  };\n\n  const CalendarToolbar = ({ onView }) => {\n    const views = { day: '日', week: '周', month: '月' }\n    const currentMoment = moment(Date.parse(currentDate));\n    return <div style={{ display: 'flex', justifyContent: 'space-between', margin: '16px 0' }}>\n      <div className=\"d-flex justify-content-between align-items-center\">\n        <Button style={{ borderRadius: 8, border: '1px solid rgba(217, 217, 217, 1)', marginRight: 24, width: 64, height: 40 }}\n          onClick={() => setDate(moment().toDate())}\n        >\n          今天\n        </Button>\n        <Button className=\"date-pre\" icon={<LeftOutlined />}\n          onClick={() => {\n            let timestamp = Date.parse(currentDate)\n            setDate(moment(timestamp).clone().add('day', -1).toDate())\n          }}\n        />\n        <Button className=\"date-next\" icon={<RightOutlined />}\n          onClick={() => {\n            let timestamp = Date.parse(currentDate)\n            setDate(moment(timestamp).clone().add('day', 1).toDate())\n          }}\n        />\n        <span className=\"date-show\">{currentView === 'day' ? currentMoment.format('YYYY年MM月DD日') : currentMoment.format('YYYY年  MM月')}</span>\n      </div>\n      <div className=\"d-flex date-group\">\n        {\n          _.map(Object.keys(views), p => {\n            return <div\n              key={p}\n              className={`date-group-item d-flex justify-content-center align-items-center ${currentView === p ? 'active-item' : ''}`}\n              onClick={() => { setView(p); onView(p); }}>\n              {views[p]}\n            </div>\n          })\n        }\n      </div>\n    </div>\n  };\n\n  const CustomEvent = (value) => {\n    return <div className={''} style={{ display: 'flex', flexDirection: 'row', alignContent: 'center', alignItems: \"center\" }}>\n      {currentView === 'month' && <div className=\"item-left\"></div>}\n      {currentView !== 'month' && <div className=\"item-nonMonth\" style={{ height: '100%', position: 'absolute', top: 0, left: 0 }}></div>}\n      <Tooltip title={value.title}>\n        <div style={{ marginLeft: currentView !== 'month' ? 10 : 0 }}>{value.title}</div>\n      </Tooltip>\n    </div>\n  }\n\n  return (\n    <div className=\"App\">\n      <Calendar\n        defaultView={currentView}\n        selectable\n        localizer={localizer}\n        date={currentDate}\n        events={eventsData}\n        style={{ height: \"100vh\" }}\n        onSelectEvent={(event) => alert(JSON.stringify(event))}\n        onSelectSlot={handleSelect}\n        components={{\n          toolbar: CalendarToolbar,\n          event: CustomEvent\n        }}\n      />\n    </div>\n  );\n}","import ReactDOM from \"react-dom\";\n\nimport ReactBigCalendar from \"./ReactBigCalendar\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <ReactBigCalendar />,\n  rootElement\n);\n"],"sourceRoot":""}